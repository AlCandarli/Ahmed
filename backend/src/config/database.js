const mongoose = require('mongoose');
require('dotenv').config();

/**
 * ุฅุนุฏุงุฏ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช MongoDB Atlas
 */
class DatabaseConfig {
  constructor() {
    this.connectionString = this.buildConnectionString();
    this.options = {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 30000,
      socketTimeoutMS: 45000,
      connectTimeoutMS: 30000,
      family: 4,
      bufferCommands: false
    };
  }

  /**
   * ุจูุงุก ุณูุณูุฉ ุงูุงุชุตุงู ูุน ูููุฉ ุงููุฑูุฑ
   */
  buildConnectionString() {
    const uri = process.env.MONGODB_URI;

    if (!uri) {
      throw new Error('MongoDB URI ุบูุฑ ูุญุฏุฏุฉ ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ');
    }

    // ุงุณุชุฎุฏุงู URI ูุจุงุดุฑุฉ ูุน ูููุฉ ุงููุฑูุฑ ุงููุฏูุฌุฉ
    return uri;
  }

  /**
   * ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
   */
  async connect() {
    try {
      console.log('๐ ุฌุงุฑู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช MongoDB Atlas...');
      console.log('๐ URI:', this.connectionString.replace(/\/\/.*:.*@/, '//***:***@'));

      await mongoose.connect(this.connectionString, this.options);

      console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');
      console.log(`๐ ูุงุนุฏุฉ ุงูุจูุงูุงุช: ${mongoose.connection.name || 'educational_platform'}`);
      console.log(`๐ ุงูุฎุงุฏู: ${mongoose.connection.host}`);
      console.log(`๐ก ุญุงูุฉ ุงูุงุชุตุงู: ${mongoose.connection.readyState}`);

      // ุฅุนุฏุงุฏ ูุณุชูุนู ุงูุฃุญุฏุงุซ
      this.setupEventListeners();

      return true;

    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', error.message);

      if (error.message.includes('IP')) {
        console.log('๐ ุชุญูู ูู ุฅุนุฏุงุฏุงุช IP Whitelist ูู MongoDB Atlas');
      }
      if (error.message.includes('authentication')) {
        console.log('๏ฟฝ ุชุญูู ูู ุงุณู ุงููุณุชุฎุฏู ููููุฉ ุงููุฑูุฑ');
      }

      // ูุง ูุฑูู ุงูุฎุทุฃุ ุจู ูุนูุฏ false ููุณูุงุญ ููุฎุงุฏู ุจุงูุนูู ุจุฏูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
      return false;
    }
  }

  /**
   * ุฅุนุฏุงุฏ ูุณุชูุนู ุฃุญุฏุงุซ ูุงุนุฏุฉ ุงูุจูุงูุงุช
   */
  setupEventListeners() {
    mongoose.connection.on('connected', () => {
      console.log('๐ Mongoose ูุชุตู ุจู MongoDB');
    });

    mongoose.connection.on('error', (err) => {
      console.error('โ ุฎุทุฃ ูู ุงุชุตุงู Mongoose:', err);
    });

    mongoose.connection.on('disconnected', () => {
      console.log('๐ ุชู ูุทุน ุงุชุตุงู Mongoose');
    });

    // ุฅุบูุงู ุงูุงุชุตุงู ุนูุฏ ุฅููุงุก ุงูุชุทุจูู
    process.on('SIGINT', async () => {
      await this.disconnect();
      process.exit(0);
    });
  }

  /**
   * ูุทุน ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
   */
  async disconnect() {
    try {
      await mongoose.connection.close();
      console.log('๐ ุชู ุฅุบูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฅุบูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error.message);
    }
  }

  /**
   * ุงูุชุญูู ูู ุญุงูุฉ ุงูุงุชุตุงู
   */
  isConnected() {
    return mongoose.connection.readyState === 1;
  }

  /**
   * ุงูุญุตูู ุนูู ูุนูููุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
   */
  getConnectionInfo() {
    if (!this.isConnected()) {
      return null;
    }

    return {
      name: mongoose.connection.name,
      host: mongoose.connection.host,
      port: mongoose.connection.port,
      readyState: mongoose.connection.readyState,
      collections: Object.keys(mongoose.connection.collections)
    };
  }
}

// ุฅูุดุงุก ูุซูู ูุงุญุฏ ูู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช
const databaseConfig = new DatabaseConfig();

module.exports = databaseConfig;
